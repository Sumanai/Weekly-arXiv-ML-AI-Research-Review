"""
–ú–æ–¥—É–ª—å –¥–æ–º–µ–π–Ω-—Å–ª–æ—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –®–µ–Ω–Ω–æ–Ω–∞.

–í—ã –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–µ—Å—å –∫–ª–∞—Å—Å EntropyCalculator.

–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –¥—Ä–æ–ø–Ω—É—Ç—å –≤–µ—Å—å –∫–æ–¥, –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏ TODO, —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å ü§ó
"""

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import torch
from typing import Any


class EntropyCalculator:
    """
    Description:
    ---------------
        –î–æ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –®–µ–Ω–Ω–æ–Ω–∞ –Ω–∞–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
        –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ —Å–ª–æ–≤–∞—Ä—é —Ç–æ–∫–µ–Ω–æ–≤.

    Examples:
    ---------------
        >>> import torch
        >>> calc = EntropyCalculator()
        >>> probs = torch.tensor([[0.5, 0.5]])  # (T=1, V=2)
        >>> H = calc.calculate_entropy(probs)
        >>> H.shape
        torch.Size([1])
    """

    def calculate_entropy(self, probabilities: torch.Tensor, epsilon: float = 1e-10) -> torch.Tensor:
        """
        Description:
        ---------------
            –í—ã—á–∏—Å–ª—è–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏—é –®–µ–Ω–Ω–æ–Ω–∞ –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ —Å–ª–æ–≤–∞—Ä—é.

        Args:
        ---------------
            probabilities: —Ç–µ–Ω–∑–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Ñ–æ—Ä–º—ã (B, T, V) –∏–ª–∏ (T, V)
            epsilon: –º–∞–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

        Returns:
        ---------------
            torch.Tensor: —Ç–µ–Ω–∑–æ—Ä —ç–Ω—Ç—Ä–æ–ø–∏–π —Ñ–æ—Ä–º—ã (B, T) –∏–ª–∏ (T,)

        Raises:
        ---------------
            ValueError: –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.

        Examples:
        ---------------
            >>> import torch
            >>> calc = EntropyCalculator()
            >>> probs = torch.tensor([[0.25, 0.25, 0.25, 0.25]])
            >>> H = calc.calculate_entropy(probs)
            >>> H.dim() in (1, 2)
            True
        """
        # TODO: —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–∞—Å—á–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏:
        # 1. –î–æ–±–∞–≤—å—Ç–µ epsilon –∫ probabilities –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è log(0)
        # 2. –í—ã—á–∏—Å–ª–∏—Ç–µ torch.log2(probabilities + epsilon)
        # 3. –£–º–Ω–æ–∂—å—Ç–µ probabilities –Ω–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º
        # 4. –ü—Ä–æ—Å—É–º–º–∏—Ä—É–π—Ç–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—é (dim=-1)
        # 5. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
        # –§–æ—Ä–º—É–ª–∞: -torch.sum(probabilities * torch.log2(probabilities + epsilon), dim=-1)

        # pass

        if torch.any(probabilities < 0):
            raise ValueError("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")

        probabilities = probabilities + epsilon
        log_probabilities = torch.log2(probabilities)
        entropy = -torch.sum(probabilities * log_probabilities, dim=-1)
        return entropy

