#!/usr/bin/env python3
"""
Ollama Client for SGR Mathematical Agent
HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π Ollama –º–æ–¥–µ–ª—å—é
"""

import json
import requests
import time
from typing import Type, TypeVar, Dict, Any, Optional, List
from pydantic import BaseModel, ValidationError
from rich.console import Console
from rich.panel import Panel

console = Console()

T = TypeVar('T', bound=BaseModel)

class OllamaClient:
    """HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Ollama API"""
    
    def __init__(self, base_url: str = "http://localhost:11434", model: str = "gemma3n:e2b"):
        self.base_url = base_url.rstrip('/')
        self.model = model
        self.generate_url = f"{self.base_url}/api/generate"
        self.chat_url = f"{self.base_url}/api/chat"
        self.tags_url = f"{self.base_url}/api/tags"
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(self.tags_url, timeout=5)
            return response.status_code == 200
        except Exception as e:
            console.print(f"[red]‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}[/red]")
            return False
    
    def list_models(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            response = requests.get(self.tags_url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                return [model["name"] for model in data.get("models", [])]
            return []
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}[/red]")
            return []
    
    def generate_text(self, prompt: str, system_prompt: Optional[str] = None, 
                     temperature: float = 0.1, max_tokens: Optional[int] = None, 
                     stream_output: bool = False) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Ollama API —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º streaming"""
        
        payload = {
            "model": self.model,
            "prompt": prompt,
            "stream": stream_output,
            "options": {
                "temperature": temperature,
                "num_predict": max_tokens or 4000,
                "stop": []
            }
        }
        
        if system_prompt:
            payload["system"] = system_prompt
        
        try:
            console.print(f"[dim]üîÑ –ó–∞–ø—Ä–æ—Å –∫ Ollama ({self.model}){'[STREAM]' if stream_output else ''}...[/dim]")
            
            response = requests.post(
                self.generate_url,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=600,  # 10 –º–∏–Ω—É—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                stream=stream_output
            )
            
            if response.status_code == 200:
                if stream_output:
                    return self._handle_streaming_response(response)
                else:
                    result = response.json()
                    generated_text = result.get("response", "")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if "eval_count" in result:
                        tokens = result.get("eval_count", 0)
                        duration = result.get("eval_duration", 0) / 1_000_000  # ns to ms
                        speed = tokens / (duration / 1000) if duration > 0 else 0
                        console.print(f"[dim]üìä –¢–æ–∫–µ–Ω—ã: {tokens}, –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} tok/sec[/dim]")
                    
                    return generated_text
            else:
                error_msg = f"HTTP {response.status_code}: {response.text}"
                console.print(f"[red]‚ùå Ollama API error: {error_msg}[/red]")
                raise Exception(error_msg)
                
        except requests.exceptions.Timeout:
            error_msg = "Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ollama"
            console.print(f"[red]‚ùå {error_msg}[/red]")
            raise Exception(error_msg)
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ Ollama: {e}[/red]")
            raise
    
    def _handle_streaming_response(self, response) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ streaming –æ—Ç–≤–µ—Ç–∞ —Å real-time –≤—ã–≤–æ–¥–æ–º"""
        import time
        from rich.live import Live
        from rich.text import Text
        
        full_text = ""
        display_text = Text()
        
        console.print("\n[yellow]üî• REAL-TIME –ì–ï–ù–ï–†–ê–¶–ò–Ø:[/yellow]")
        console.print("‚îÄ" * 80)
        
        with Live(display_text, refresh_per_second=4, console=console) as live:
            start_time = time.time()
            
            try:
                for line in response.iter_lines():
                    if line:
                        try:
                            chunk_data = json.loads(line.decode('utf-8'))
                            
                            if 'response' in chunk_data:
                                chunk_text = chunk_data['response']
                                full_text += chunk_text
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                display_text = Text(full_text)
                                display_text.stylize("green")
                                live.update(display_text)
                                
                                # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                                if chunk_data.get('done', False):
                                    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                                    duration = time.time() - start_time
                                    tokens = len(full_text.split())
                                    speed = tokens / duration if duration > 0 else 0
                                    
                                    console.print(f"\n[dim]üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {tokens} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ {duration:.1f}—Å, {speed:.1f} tok/sec[/dim]")
                                    break
                                    
                        except json.JSONDecodeError:
                            continue
                            
            except Exception as e:
                console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ streaming: {e}[/red]")
        
        console.print("‚îÄ" * 80)
        return full_text
    
    def generate_structured(self, schema: Type[T], prompt: str, 
                          system_prompt: Optional[str] = None,
                          max_retries: int = 3, stream_output: bool = True) -> T:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Pydantic —Å—Ö–µ–º—É
        
        –í–ê–ñ–ù–û: Ollama –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω—É—é JSON Schema –≤–∞–ª–∏–¥–∞—Ü–∏—é,
        –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è post-processing –ø–æ–¥—Ö–æ–¥ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        """
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç - –ë–ï–ó JSON Schema!
        json_system_prompt = f"""
{system_prompt or ''}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –æ–±—ä–µ–∫—Ç–æ–º —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.

–ù–ï –ì–ï–ù–ï–†–ò–†–£–ô–¢–ï JSON SCHEMA! –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ JSON –î–ê–ù–ù–´–ï!

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –§–û–†–ú–ê–¢–£:
1. –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç - –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ
2. –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö  
3. –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
4. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–∏, —á–∏—Å–ª–∞, –º–∞—Å—Å–∏–≤—ã, –±—É–ª–µ–≤–æ)

–ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´ JSON –î–ê–ù–ù–´–•:
{{
  "tool": "analyze_problem",
  "reasoning": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–∏–Ω–µ–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ",
  "problem_domain": "algebra"
}}

{{
  "problem_type": "linear equation", 
  "difficulty": "easy",
  "approach": "isolation method",
  "estimated_steps": 2
}}

–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û (–ù–ï –î–ï–õ–ê–ô–¢–ï –¢–ê–ö):
- –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ "properties", "required", "type", "description" 
- –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ markdown ````json –±–ª–æ–∫–∏
- –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–æ/–ø–æ—Å–ª–µ JSON

–ù–ï –î–û–ë–ê–í–õ–Ø–ô–¢–ï –ù–ò–ö–ê–ö–û–ì–û –¢–ï–ö–°–¢–ê –î–û –ò–õ–ò –ü–û–°–õ–ï JSON!
""".strip()
        
        for attempt in range(max_retries):
            try:
                console.print(f"[dim]üéØ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ #{attempt + 1}[/dim]")
                
                raw_response = self.generate_text(
                    prompt=prompt,
                    system_prompt=json_system_prompt,
                    temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
                    stream_output=stream_output
                )
                
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                cleaned_response = self._extract_json(raw_response)
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                console.print(f"[dim]üìù Raw response length: {len(raw_response)}[/dim]")
                console.print(f"[dim]üìù Cleaned JSON length: {len(cleaned_response)}[/dim]")
                
                # –ü–∞—Ä—Å–∏–Ω–≥ JSON
                try:
                    parsed_data = json.loads(cleaned_response)
                except json.JSONDecodeError as e:
                    console.print(f"[yellow]‚ö†Ô∏è JSON parse error (attempt {attempt + 1}): {e}[/yellow]")
                    console.print(f"[dim]Raw: {raw_response[:200]}...[/dim]")
                    continue
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
                try:
                    validated_obj = schema(**parsed_data)
                    console.print(f"[green]‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω[/green]")
                    return validated_obj
                    
                except ValidationError as e:
                    console.print(f"[yellow]‚ö†Ô∏è Validation error (attempt {attempt + 1}):[/yellow]")
                    error_count = len(e.errors())
                    console.print(f"[dim]  –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {error_count}[/dim]")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                    for i, error in enumerate(e.errors()[:5]):
                        console.print(f"  - {error['loc']}: {error['msg']}")
                    if error_count > 5:
                        console.print(f"  ... –∏ –µ—â–µ {error_count - 5} –æ—à–∏–±–æ–∫")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏, –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                    console.print("[yellow]üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏...[/yellow]")
                    corrected = self._attempt_correction(parsed_data, schema, e)
                    if corrected:
                        console.print("[green]‚úÖ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞![/green]")
                        return corrected
                    else:
                        console.print("[dim]‚ùå –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é[/dim]")
                    continue
                    
            except Exception as e:
                console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (attempt {attempt + 1}): {e}[/red]")
                if attempt == max_retries - 1:
                    raise
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
        console.print(f"[red]‚ùå {error_msg}[/red]")
        raise Exception(error_msg)
    
    def _extract_json(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å markdown –∏ –¥—Ä—É–≥–∏–º –º—É—Å–æ—Ä–æ–º"""
        import re
        
        text = text.strip()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ markdown
        markdown_patterns = [
            r'```json\s*',       # ```json –≤ –Ω–∞—á–∞–ª–µ
            r'```\s*$',          # ``` –≤ –∫–æ–Ω—Ü–µ
            r'^```\s*',          # ``` –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
            r'`{3,}\w*\s*',      # –ª—é–±—ã–µ —Ç—Ä–æ–π–Ω—ã–µ –±—ç–∫—Ç–∏–∫–∏ —Å —è–∑—ã–∫–æ–º
        ]
        
        # –£–¥–∞–ª—è–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É
        for pattern in markdown_patterns:
            text = re.sub(pattern, '', text, flags=re.MULTILINE)
        
        text = text.strip()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        json_patterns = [
            # –ü–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç –æ—Ç { –¥–æ }
            r'(\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\})',
            # JSON –æ–±—ä–µ–∫—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
            r'(\{(?:[^{}]|(?:\{[^{}]*\}))*\})',
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–π { –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π }
            r'(\{.*\})',
        ]
        
        for pattern in json_patterns:
            match = re.search(pattern, text, re.DOTALL)
            if match:
                candidate = match.group(1).strip()
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π JSON
                if candidate.count('{') == candidate.count('}') and candidate.count('"') % 2 == 0:
                    return candidate
        
        # Fallback: —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —Å–∫–æ–±–æ–∫
        start_idx = text.find('{')
        if start_idx == -1:
            return text  # –ù–µ—Ç JSON —Å–∫–æ–±–æ–∫
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
        brace_count = 0
        for i, char in enumerate(text[start_idx:], start_idx):
            if char == '{':
                brace_count += 1
            elif char == '}':
                brace_count -= 1
                if brace_count == 0:
                    return text[start_idx:i+1]
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç –ø–µ—Ä–≤–æ–π —Å–∫–æ–±–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞
        return text[start_idx:]
    
    def _attempt_correction(self, data: Dict[str, Any], schema: Type[T], 
                          validation_error: ValidationError) -> Optional[T]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        try:
            corrected_data = data.copy()
            
            # –°–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ö–µ–º
            default_values = {
                'tool': self._guess_tool_from_schema(schema),
                'reasoning': "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
                'current_situation': "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
                'problem_understanding': "good",
                'solution_progress': "analysis_done",
                'task_completed': False,
                'remaining_steps': ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑"],
                'reasoning_chain': ["–®–∞–≥ 1", "–®–∞–≥ 2"],
                'verification_attempts': 0,
                'improvement_attempts': 0,
                'chosen_approach': "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                'solution_steps_plan': ["–®–∞–≥ 1", "–®–∞–≥ 2", "–®–∞–≥ 3"],
                'expected_techniques': ["–±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã"],
                'problem_domain': "algebra",
                'problem_type': "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ",
                'key_concepts': ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä–µ—à–µ–Ω–∏–µ"],
                'difficulty_assessment': "medium",
                'suggested_approaches': ["–º–µ—Ç–æ–¥ 1", "–º–µ—Ç–æ–¥ 2"],
                'solution_summary': "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                'detailed_solution': "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                'mathematical_rigor': "complete",
                'confidence': "high",
                'final_answer': "–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                'solution_quality': "good",
                'completed_steps': ["–∞–Ω–∞–ª–∏–∑", "—Ä–µ—à–µ–Ω–∏–µ"]
            }
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
            self._fix_complex_fields(corrected_data)
            
            for error in validation_error.errors():
                field_name = error['loc'][0] if error['loc'] else None
                error_type = error['type']
                
                if field_name and error_type == 'missing':
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if field_name in default_values:
                        corrected_data[field_name] = default_values[field_name]
                    else:
                        # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
                        field_info = schema.model_fields.get(field_name)
                        if field_info:
                            if hasattr(field_info.annotation, '__origin__'):
                                if field_info.annotation.__origin__ is list:
                                    corrected_data[field_name] = ["–∑–Ω–∞—á–µ–Ω–∏–µ"]
                                elif field_info.annotation.__origin__ is dict:
                                    corrected_data[field_name] = {}
                            else:
                                if field_info.annotation == str:
                                    corrected_data[field_name] = "–∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
                                elif field_info.annotation == bool:
                                    corrected_data[field_name] = False
                                elif field_info.annotation == int:
                                    corrected_data[field_name] = 0
                
                elif field_name == 'tool' and error_type == 'literal_error':
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π tool
                    corrected_data['tool'] = self._guess_tool_from_schema(schema)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è Union —Ç–∏–ø–æ–≤
            if hasattr(schema, '__name__') and 'NextStep' in schema.__name__:
                corrected_data = self._fix_nextstep_union(corrected_data, schema)
            
            return schema(**corrected_data)
            
        except Exception as e:
            console.print(f"[dim]üîß –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}[/dim]")
            return None
    
    def _guess_tool_from_schema(self, schema: Type[T]) -> str:
        """–£–≥–∞–¥—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è tool –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Å—Ö–µ–º—ã"""
        schema_name = schema.__name__.lower()
        
        # –î–ª—è MathSolutionNextStep - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        if 'nextstep' in schema_name or 'mathsolution' in schema_name:
            return 'generate_solution'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ—à–µ–Ω–∏—é –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        elif 'analysis' in schema_name:
            return 'analyze_problem'
        elif 'strategy' in schema_name:
            return 'choose_strategy'
        elif 'solution' in schema_name:
            return 'generate_solution'
        elif 'verification' in schema_name:
            return 'verify_solution'
        elif 'improvement' in schema_name:
            return 'improve_solution'
        elif 'completion' in schema_name:
            return 'complete_task'
        else:
            return 'generate_solution'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ—à–µ–Ω–∏—é
    
    def _fix_nextstep_union(self, data: Dict[str, Any], schema: Type[T]) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è NextStep —Å—Ö–µ–º —Å Union —Ç–∏–ø–∞–º–∏"""
        if 'function' not in data or not isinstance(data['function'], dict):
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            data['function'] = self._create_default_function(data)
            return data
            
        function_data = data['function']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π Union —Ç–∏–ø –Ω—É–∂–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        target_union_type = self._detect_union_type(data, function_data)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if target_union_type == 'analyze_problem':
            data['function'] = {
                'tool': 'analyze_problem',
                'reasoning': function_data.get('reasoning', '–ê–Ω–∞–ª–∏–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏'),
                'problem_domain': function_data.get('problem_domain', 'algebra'),
                'problem_type': function_data.get('problem_type', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ'),
                'key_concepts': function_data.get('key_concepts', ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ä–µ—à–µ–Ω–∏–µ']),
                'difficulty_assessment': function_data.get('difficulty_assessment', 'medium'),
                'suggested_approaches': function_data.get('suggested_approaches', ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥', '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥'])
            }
        elif target_union_type == 'choose_strategy':
            data['function'] = {
                'tool': 'choose_strategy',
                'reasoning': function_data.get('reasoning', '–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–µ—à–µ–Ω–∏—è'),
                'chosen_approach': function_data.get('chosen_approach', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥'),
                'solution_steps_plan': function_data.get('solution_steps_plan', ['—à–∞–≥ 1', '—à–∞–≥ 2', '—à–∞–≥ 3']),
                'expected_techniques': function_data.get('expected_techniques', ['–±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã'])
            }
        elif target_union_type == 'generate_solution':
            data['function'] = {
                'tool': 'generate_solution',
                'reasoning': function_data.get('reasoning', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏'),
                'solution_summary': function_data.get('solution_summary', '–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ'),
                'detailed_solution': function_data.get('detailed_solution', '–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —à–∞–≥–∞–º–∏'),
                'key_insights': function_data.get('key_insights', ['–∫–ª—é—á–µ–≤–∞—è –∏–¥–µ—è']),
                'mathematical_rigor': function_data.get('mathematical_rigor', 'complete'),
                'confidence': function_data.get('confidence', 'high')
            }
        elif target_union_type == 'complete_task':
            data['function'] = {
                'tool': 'complete_task',
                'reasoning': function_data.get('reasoning', '–ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞'),
                'final_answer': function_data.get('final_answer', '–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'),
                'solution_quality': function_data.get('solution_quality', 'good'),
                'completed_steps': function_data.get('completed_steps', ['–∞–Ω–∞–ª–∏–∑', '—Ä–µ—à–µ–Ω–∏–µ'])
            }
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–∞–ª–∏–∑
            data['function'] = self._create_default_function(data)
            
        return data
    
    def _fix_complex_fields(self, data: Dict[str, Any]) -> None:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º remaining_steps - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å List[str], –∞ –Ω–µ List[dict]
        if 'remaining_steps' in data and isinstance(data['remaining_steps'], list):
            steps = data['remaining_steps']
            if steps and isinstance(steps[0], dict):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dict –≤ —Å—Ç—Ä–æ–∫–∏
                string_steps = []
                for step in steps:
                    if isinstance(step, dict) and 'description' in step:
                        string_steps.append(step['description'])
                    elif isinstance(step, dict):
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        for value in step.values():
                            if isinstance(value, str):
                                string_steps.append(value)
                                break
                    else:
                        string_steps.append(str(step))
                data['remaining_steps'] = string_steps[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —à–∞–≥–æ–≤
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º problem_domain - —É–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if 'problem_domain' in data:
            domain = data['problem_domain']
            valid_domains = ['algebra', 'geometry', 'calculus', 'number_theory', 'analysis', 'combinatorics']
            if domain not in valid_domains:
                data['problem_domain'] = 'algebra'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _detect_union_type(self, context_data: Dict[str, Any], function_data: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ Union —Ç–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö
        if 'tool' in function_data:
            tool = function_data['tool']
            if tool in ['analyze_problem', 'choose_strategy', 'generate_solution', 
                       'verify_solution', 'improve_solution', 'complete_task']:
                return tool
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏
        progress = context_data.get('solution_progress', 'not_started')
        task_completed = context_data.get('task_completed', False)
        
        if task_completed:
            return 'complete_task'
        elif progress == 'not_started':
            return 'analyze_problem'
        elif progress in ['analysis_done', 'analyzing']:
            return 'choose_strategy' 
        elif progress in ['planning', 'solving_in_progress']:
            return 'generate_solution'
        elif progress == 'solution_complete':
            return 'complete_task'
        else:
            return 'analyze_problem'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _create_default_function(self, context_data: Dict[str, Any]) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'tool': 'analyze_problem',
            'reasoning': '–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏',
            'problem_domain': 'algebra',
            'problem_type': '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
            'key_concepts': ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ä–µ—à–µ–Ω–∏–µ'],
            'difficulty_assessment': 'medium',
            'suggested_approaches': ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥', '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥']
        }
    
    def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Ollama –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        result = {
            "available": False,
            "models": [],
            "current_model": self.model,
            "base_url": self.base_url
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            result["available"] = self.is_available()
            
            if result["available"]:
                result["models"] = self.list_models()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
                if self.model not in result["models"]:
                    console.print(f"[yellow]‚ö†Ô∏è –ú–æ–¥–µ–ª—å {self.model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö[/yellow]")
                    console.print(f"[dim]–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(result['models'])}[/dim]")
                
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ health check: {e}[/red]")
        
        return result

# =============================================================================
# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

def test_ollama_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama"""
    console.print(Panel("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", title="Test"))
    
    client = OllamaClient()
    
    # Health check
    health = client.health_check()
    console.print(f"Status: {'‚úÖ OK' if health['available'] else '‚ùå Unavailable'}")
    console.print(f"URL: {health['base_url']}")
    console.print(f"Model: {health['current_model']}")
    console.print(f"Available models: {', '.join(health['models'])}")
    
    if not health["available"]:
        console.print("[red]‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:[/red]")
        console.print("[dim]docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama[/dim]")
        console.print("[dim]docker exec -it ollama ollama run gemma2:7b[/dim]")
        return False
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    try:
        console.print("\nüîÑ –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        response = client.generate_text("–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: x^2 = 4")
        console.print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        console.print(f"–ü—Ä–µ–≤—å—é: {response[:100]}...")
        return True
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}[/red]")
        return False

if __name__ == "__main__":
    test_ollama_connection()