#!/usr/bin/env python3
"""
SGR Mathematical Agent - Schema-Guided Reasoning –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ agent.py –ø–æ–¥ SGR –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Ollama Docker

üß† –ü—Ä–∏–Ω—Ü–∏–ø—ã SGR –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á:
üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è  
üîç –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ
üèóÔ∏è –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å dispatch pattern
üöÄ –õ–æ–∫–∞–ª—å–Ω–∞—è LLM —á–µ—Ä–µ–∑ Ollama Docker
"""

import json
import os
import yaml
import argparse
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path

from rich.console import Console
from rich.panel import Panel
from rich.rule import Rule
from rich.table import Table

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from math_sgr_schemas import (
    MathSolutionNextStep, ProblemAnalysis, SolutionStrategy, 
    MathematicalSolution, SolutionVerification, SolutionImprovement,
    TaskCompletion, get_problem_system_prompt, create_math_context
)
from ollama_client import OllamaClient

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    config = {
        'ollama_base_url': os.getenv('OLLAMA_BASE_URL', 'http://localhost:11434'),
        'ollama_model': os.getenv('OLLAMA_MODEL', 'gemma3n:e2b'),
        'temperature': float(os.getenv('TEMPERATURE', '0.1')),
        'max_tokens': int(os.getenv('MAX_TOKENS', '4000')),
        'max_execution_steps': int(os.getenv('MAX_EXECUTION_STEPS', '15')),
        'max_verification_attempts': int(os.getenv('MAX_VERIFICATION_ATTEMPTS', '3')),
        'max_improvement_attempts': int(os.getenv('MAX_IMPROVEMENT_ATTEMPTS', '5')),
        'reports_directory': os.getenv('REPORTS_DIRECTORY', 'reports'),
        'memory_directory': os.getenv('MEMORY_DIRECTORY', 'memory'),
    }
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ config.yaml
    config_file = Path('config.yaml')
    if config_file.exists():
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                yaml_config = yaml.safe_load(f)
            
            if yaml_config and 'sgr_math_agent' in yaml_config:
                sgr_config = yaml_config['sgr_math_agent']
                config.update({k: v for k, v in sgr_config.items() if v is not None})
                
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.yaml: {e}")
    
    return config

CONFIG = load_config()

# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´
# =============================================================================

console = Console()
ollama_client = OllamaClient(
    base_url=CONFIG['ollama_base_url'],
    model=CONFIG['ollama_model']
)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
CONTEXT = create_math_context()

# =============================================================================
# –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ò –ü–ê–ú–Ø–¢–ò
# =============================================================================

def setup_logging(log_file: Optional[str] = None):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if log_file:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        import logging
        logging.basicConfig(
            filename=log_file,
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            encoding='utf-8'
        )
        console.print(f"[dim]üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª: {log_file}[/dim]")

def save_memory(memory_file: str, problem_statement: str, 
               current_iteration: int = 0, max_runs: int = 1):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç—å"""
    memory = {
        "problem_statement": problem_statement,
        "current_iteration": current_iteration,
        "max_runs": max_runs,
        "context": CONTEXT,
        "config": CONFIG,
        "timestamp": datetime.now().isoformat()
    }
    
    try:
        memory_path = Path(memory_file)
        memory_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(memory_file, 'w', encoding='utf-8') as f:
            json.dump(memory, f, indent=2, ensure_ascii=False, default=str)
        
        console.print(f"[dim]üíæ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {memory_file}[/dim]")
        return True
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}[/red]")
        return False

def load_memory(memory_file: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ø–∞–º—è—Ç–∏"""
    try:
        with open(memory_file, 'r', encoding='utf-8') as f:
            memory = json.load(f)
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if "context" in memory:
            CONTEXT.update(memory["context"])
        
        console.print(f"[dim]üìÇ –ü–∞–º—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {memory_file}[/dim]")
        return memory
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏: {e}[/red]")
        return None

# =============================================================================
# DISPATCH –°–ò–°–¢–ï–ú–ê - –í–´–ü–û–õ–ù–ï–ù–ò–ï SGR –ö–û–ú–ê–ù–î
# =============================================================================


def dispatch(cmd: Any, context: Dict[str, Any]) -> Any:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SGR –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ dispatch pattern"""
    
    if isinstance(cmd, ProblemAnalysis):
        return handle_problem_analysis(cmd, context)
    elif isinstance(cmd, SolutionStrategy):
        return handle_solution_strategy(cmd, context)
    elif isinstance(cmd, MathematicalSolution):
        return handle_mathematical_solution(cmd, context)
    elif isinstance(cmd, SolutionVerification):
        return handle_solution_verification(cmd, context)
    elif isinstance(cmd, SolutionImprovement):
        return handle_solution_improvement(cmd, context)
    elif isinstance(cmd, TaskCompletion):
        return handle_task_completion(cmd, context)
    else:
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {type(cmd)}"

def handle_problem_analysis(cmd: ProblemAnalysis, context: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
    console.print(f"üîç [bold cyan]–ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò[/bold cyan]")
    console.print(f"üìä –û–±–ª–∞—Å—Ç—å: [green]{cmd.problem_domain}[/green]")
    console.print(f"üéØ –¢–∏–ø: {cmd.problem_type}")
    console.print(f"üí° –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: {', '.join(cmd.key_concepts)}")
    console.print(f"üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: [yellow]{cmd.difficulty_assessment}[/yellow]")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    analysis_result = {
        "tool": "analyze_problem",
        "domain": cmd.problem_domain,
        "type": cmd.problem_type,
        "concepts": cmd.key_concepts,
        "difficulty": cmd.difficulty_assessment,
        "approaches": cmd.suggested_approaches,
        "reasoning": cmd.reasoning,
        "timestamp": datetime.now().isoformat()
    }
    
    context["analysis"] = analysis_result
    console.print(f"üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {cmd.reasoning[:100]}...")
    
    return analysis_result

def handle_solution_strategy(cmd: SolutionStrategy, context: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–µ—à–µ–Ω–∏—è"""
    console.print(f"üéØ [bold magenta]–í–´–ë–û–† –°–¢–†–ê–¢–ï–ì–ò–ò[/bold magenta]")
    console.print(f"üîß –ü–æ–¥—Ö–æ–¥: [green]{cmd.chosen_approach}[/green]")
    console.print(f"üìã –®–∞–≥–æ–≤ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è: {len(cmd.solution_steps_plan)}")
    
    for i, step in enumerate(cmd.solution_steps_plan, 1):
        console.print(f"   {i}. {step}")
    
    if cmd.required_lemmas:
        console.print(f"üìö –¢—Ä–µ–±—É–µ–º—ã–µ –ª–µ–º–º—ã: {', '.join(cmd.required_lemmas)}")
    
    if cmd.case_analysis_needed:
        console.print(f"üîÄ [yellow]–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–±–æ—Ä –ø–æ —Å–ª—É—á–∞—è–º[/yellow]")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    strategy_result = {
        "tool": "choose_strategy",
        "approach": cmd.chosen_approach,
        "steps_plan": cmd.solution_steps_plan,
        "lemmas": cmd.required_lemmas,
        "case_analysis": cmd.case_analysis_needed,
        "techniques": cmd.expected_techniques,
        "reasoning": cmd.reasoning,
        "timestamp": datetime.now().isoformat()
    }
    
    context["strategy"] = strategy_result
    return strategy_result

def handle_mathematical_solution(cmd: MathematicalSolution, context: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    console.print(f"üìù [bold blue]–ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ï–®–ï–ù–ò–ï[/bold blue]")
    console.print(f"üìã –†–µ–∑—é–º–µ: {cmd.solution_summary}")
    console.print(f"üìä –°—Ç—Ä–æ–≥–æ—Å—Ç—å: [green]{cmd.mathematical_rigor}[/green]")
    console.print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: [cyan]{cmd.confidence}[/cyan]")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
    if cmd.key_insights:
        console.print(f"üí° [bold yellow]–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:[/bold yellow]")
        for insight in cmd.key_insights:
            console.print(f"   ‚Ä¢ {insight}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_dir = Path(CONFIG['reports_directory'])
    report_dir.mkdir(exist_ok=True)
    
    solution_file = report_dir / f"solution_{timestamp}.md"
    with open(solution_file, 'w', encoding='utf-8') as f:
        f.write(f"# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n\n")
        f.write(f"*–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n\n")
        f.write(f"## –†–µ–∑—é–º–µ\n{cmd.solution_summary}\n\n")
        f.write(f"## –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n{cmd.detailed_solution}\n\n")
        f.write(f"## –ê–Ω–∞–ª–∏–∑\n")
        f.write(f"- **–°—Ç—Ä–æ–≥–æ—Å—Ç—å**: {cmd.mathematical_rigor}\n")
        f.write(f"- **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å**: {cmd.confidence}\n")
        if cmd.key_insights:
            f.write(f"- **–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã**: {', '.join(cmd.key_insights)}\n")
    
    console.print(f"üíæ –†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: [dim]{solution_file}[/dim]")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    solution_result = {
        "tool": "generate_solution",
        "summary": cmd.solution_summary,
        "detailed_solution": cmd.detailed_solution,
        "insights": cmd.key_insights,
        "rigor": cmd.mathematical_rigor,
        "confidence": cmd.confidence,
        "reasoning": cmd.reasoning,
        "file_path": str(solution_file),
        "timestamp": datetime.now().isoformat()
    }
    
    context["solution"] = solution_result
    context["solution_history"] = context.get("solution_history", [])
    context["solution_history"].append(solution_result)
    
    return solution_result

def handle_solution_verification(cmd: SolutionVerification, context: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è"""
    console.print(f"üîç [bold yellow]–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–Ø[/bold yellow]")
    console.print(f"üîß –ú–µ—Ç–æ–¥: [cyan]{cmd.verification_approach}[/cyan]")
    console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: [green]{cmd.verification_result}[/green]")
    
    if cmd.identified_issues:
        console.print(f"‚ö†Ô∏è [bold red]–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:[/bold red]")
        for i, issue in enumerate(cmd.identified_issues, 1):
            severity = ""
            if cmd.issue_severity and i <= len(cmd.issue_severity):
                sev = cmd.issue_severity[i-1]
                severity = f" [{sev}]"
            console.print(f"   {i}. {issue}{severity}")
    
    if cmd.suggestions:
        console.print(f"üí° [bold blue]–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:[/bold blue]")
        for suggestion in cmd.suggestions:
            console.print(f"   ‚Ä¢ {suggestion}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π
    context["verification_count"] = context.get("verification_count", 0) + 1
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    verification_result = {
        "tool": "verify_solution",
        "approach": cmd.verification_approach,
        "result": cmd.verification_result,
        "issues": cmd.identified_issues,
        "severity": cmd.issue_severity,
        "suggestions": cmd.suggestions,
        "reasoning": cmd.reasoning,
        "attempt_number": context["verification_count"],
        "timestamp": datetime.now().isoformat()
    }
    
    context["verification"] = verification_result
    return verification_result

def handle_solution_improvement(cmd: SolutionImprovement, context: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è"""
    console.print(f"üîß [bold green]–£–õ–£–ß–®–ï–ù–ò–ï –†–ï–®–ï–ù–ò–Ø[/bold green]")
    console.print(f"üìù –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {cmd.improvement_strategy}")
    
    console.print(f"üéØ [bold red]–ü—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:[/bold red]")
    for issue in cmd.issues_to_address:
        console.print(f"   ‚Ä¢ {issue}")
    
    console.print(f"üìà [bold blue]–û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:[/bold blue]")
    for improvement in cmd.expected_improvements:
        console.print(f"   ‚Ä¢ {improvement}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
    context["improvement_count"] = context.get("improvement_count", 0) + 1
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    improvement_result = {
        "tool": "improve_solution",
        "strategy": cmd.improvement_strategy,
        "issues": cmd.issues_to_address,
        "expected_improvements": cmd.expected_improvements,
        "reasoning": cmd.reasoning,
        "attempt_number": context["improvement_count"],
        "timestamp": datetime.now().isoformat()
    }
    
    context["improvements"] = context.get("improvements", [])
    context["improvements"].append(improvement_result)
    
    return improvement_result

def handle_task_completion(cmd: TaskCompletion, context: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    console.print(f"üéâ [bold green]–ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê[/bold green]")
    console.print(f"üìã –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: [yellow]{cmd.final_answer}[/yellow]")
    console.print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è: [cyan]{cmd.solution_quality}[/cyan]")
    
    console.print(f"‚úÖ [bold blue]–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã:[/bold blue]")
    for step in cmd.completed_steps:
        console.print(f"   ‚Ä¢ {step}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
    verification_count = context.get("verification_count", 0)
    improvement_count = context.get("improvement_count", 0)
    
    table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—à–µ–Ω–∏—è")
    table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
    
    table.add_row("–ü–æ–ø—ã—Ç–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏", str(verification_count))
    table.add_row("–ü–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è", str(improvement_count))
    table.add_row("–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è", cmd.solution_quality)
    
    console.print(table)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    completion_result = {
        "tool": "complete_task",
        "final_answer": cmd.final_answer,
        "quality": cmd.solution_quality,
        "completed_steps": cmd.completed_steps,
        "reasoning": cmd.reasoning,
        "statistics": {
            "verification_attempts": verification_count,
            "improvement_attempts": improvement_count,
        },
        "timestamp": datetime.now().isoformat()
    }
    
    context["completion"] = completion_result
    return completion_result

# =============================================================================
# –û–°–ù–û–í–ù–û–ô –î–í–ò–ñ–û–ö SGR
# =============================================================================

def execute_sgr_math_task(problem_statement: str) -> str:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SGR"""
    
    console.print(Panel(problem_statement, title="üìê –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞", title_align="left"))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama
    if not ollama_client.is_available():
        console.print("[red]‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.[/red]")
        console.print("[dim]docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama[/dim]")
        console.print("[dim]docker exec -it ollama ollama run gemma2:7b[/dim]")
        return "OLLAMA_UNAVAILABLE"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    CONTEXT.clear()
    CONTEXT.update(create_math_context())
    CONTEXT["problem_text"] = problem_statement
    CONTEXT["start_time"] = datetime.now()
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    system_prompt = get_problem_system_prompt()
    
    console.print(f"[bold green]üöÄ SGR –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ì–ï–ù–¢ –ó–ê–ü–£–©–ï–ù[/bold green]")
    console.print(f"[dim]ü§ñ –ú–æ–¥–µ–ª—å: {CONFIG['ollama_model']}[/dim]")
    console.print(f"[dim]üîó Ollama URL: {CONFIG['ollama_base_url']}[/dim]")
    console.print(f"[dim]üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {CONFIG['temperature']}[/dim]")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª SGR
    for i in range(CONFIG['max_execution_steps']):
        step_id = f"step_{i+1}"
        console.print(f"\nüß† [bold]{step_id}[/bold]: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context_msg = f"–¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢ –ó–ê–î–ê–ß–ò:\n"
        context_msg += f"–ó–∞–¥–∞—á–∞: {problem_statement}\n"
        context_msg += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: –®–∞–≥ {i+1}/{CONFIG['max_execution_steps']}\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö
        if CONTEXT.get("analysis"):
            context_msg += f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {CONTEXT['analysis']['domain']} / {CONTEXT['analysis']['type']}\n"
        if CONTEXT.get("strategy"):
            context_msg += f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±—Ä–∞–Ω–∞: {CONTEXT['strategy']['approach']}\n"
        if CONTEXT.get("solution"):
            context_msg += f"‚úÖ –†–µ—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {CONTEXT['solution']['rigor']} —É—Ä–æ–≤–µ–Ω—å\n"
        if CONTEXT.get("verification"):
            context_msg += f"üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {CONTEXT['verification']['result']}\n"
        
        context_msg += f"–ü–æ–ø—ã—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {CONTEXT.get('verification_count', 0)}/{CONFIG['max_verification_attempts']}\n"
        context_msg += f"–ü–æ–ø—ã—Ç–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è: {CONTEXT.get('improvement_count', 0)}/{CONFIG['max_improvement_attempts']}\n"
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —á–µ—Ä–µ–∑ SGR —Å—Ö–µ–º—É
            next_step = ollama_client.generate_structured(
                schema=MathSolutionNextStep,
                prompt=f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏:\n\n{context_msg}",
                system_prompt=system_prompt,
                max_retries=3
            )
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            console.print(f"[dim]üí≠ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ: {next_step.reasoning_chain}[/dim]")
            console.print(f"[dim]üìä –°–∏—Ç—É–∞—Ü–∏—è: {next_step.current_situation[:100]}...[/dim]")
            console.print(f"[dim]üéØ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {next_step.problem_understanding}[/dim]")
            console.print(f"[dim]üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {next_step.solution_progress}[/dim]")
            console.print(f"[dim]üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {next_step.function.tool}[/dim]")
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SGR —à–∞–≥–∞: {e}[/red]")
            break
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        if next_step.task_completed or isinstance(next_step.function, TaskCompletion):
            console.print(f"[bold green]‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è[/bold green]")
            dispatch(next_step.function, CONTEXT)
            break
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ü–∏–∫–ª–æ–≤
        if (next_step.verification_attempts >= CONFIG['max_verification_attempts'] or
            next_step.improvement_attempts >= CONFIG['max_improvement_attempts']):
            console.print(f"[yellow]‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –ª–∏–º–∏—Ç—ã –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ[/yellow]")
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            forced_completion = TaskCompletion(
                tool="complete_task",
                reasoning="–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ–ø—ã—Ç–æ–∫ —É–ª—É—á—à–µ–Ω–∏—è",
                final_answer="–†–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ –ª–∏–º–∏—Ç–∞–º –∏—Ç–µ—Ä–∞—Ü–∏–π",
                solution_quality="satisfactory",
                completed_steps=["–ê–Ω–∞–ª–∏–∑", "–†–µ—à–µ–Ω–∏–µ", "–ü–æ–ø—ã—Ç–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è"]
            )
            dispatch(forced_completion, CONTEXT)
            break
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        current_step = next_step.remaining_steps[0] if next_step.remaining_steps else "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ"
        console.print(f"[blue]üéØ –¢–µ–∫—É—â–∏–π —à–∞–≥: {current_step}[/blue]")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        result = dispatch(next_step.function, CONTEXT)
        
        console.print(f"[dim]‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result)[:100]}...[/dim]")
    
    return "COMPLETED"

# =============================================================================
# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
# =============================================================================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    parser = argparse.ArgumentParser(description='SGR Mathematical Agent - –†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á')
    parser.add_argument('problem_file', nargs='?', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π')
    parser.add_argument('--log', '-l', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤')
    parser.add_argument('--memory', '-mem', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è')
    parser.add_argument('--resume', '-r', action='store_true', help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏')
    parser.add_argument('--test-ollama', action='store_true', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama')
    parser.add_argument('--interactive', '-i', action='store_true', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.log:
        setup_logging(args.log)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama
    if args.test_ollama:
        from ollama_client import test_ollama_connection
        test_ollama_connection()
        return
    
    console.print(Panel("üß† SGR Mathematical Agent", subtitle="Schema-Guided Reasoning –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"))
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
    if args.resume and args.memory:
        memory = load_memory(args.memory)
        if memory:
            console.print(f"[green]üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ {args.memory}[/green]")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if args.interactive:
        console.print("\n[bold cyan]üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º[/bold cyan]")
        console.print("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        while True:
            try:
                problem = input("\nüìê –ó–∞–¥–∞—á–∞: ").strip()
                if problem.lower() in ['quit', 'exit', 'q']:
                    console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if not problem:
                    console.print("‚ùå –ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                    continue
                
                result = execute_sgr_math_task(problem)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
                if args.memory:
                    save_memory(args.memory, problem)
                    
            except KeyboardInterrupt:
                console.print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
                continue
    
    # –†–µ–∂–∏–º —Å —Ñ–∞–π–ª–æ–º
    elif args.problem_file:
        try:
            problem_path = Path(args.problem_file)
            if not problem_path.exists():
                console.print(f"[red]‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.problem_file}[/red]")
                return
            
            with open(problem_path, 'r', encoding='utf-8') as f:
                problem_statement = f.read().strip()
            
            console.print(f"[dim]üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∏–∑: {args.problem_file}[/dim]")
            
            result = execute_sgr_math_task(problem_statement)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
            if args.memory:
                save_memory(args.memory, problem_statement)
                
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}[/red]")
    
    else:
        console.print("[yellow]üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --interactive –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–µ–π[/yellow]")
        console.print("\n–ü—Ä–∏–º–µ—Ä:")
        console.print("  python sgr_math_agent.py --interactive")
        console.print("  python sgr_math_agent.py problems/problem1.txt")
        console.print("  python sgr_math_agent.py --test-ollama")

if __name__ == "__main__":
    main()