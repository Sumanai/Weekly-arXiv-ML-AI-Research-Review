"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Router + Expert –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è MoE –º–µ—Ö–∞–Ω–∏–∫–∏.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ö–∞–∫ Router –≤—ã–±–∏—Ä–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
2. –ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è routing weights
3. –ö–∞–∫ Expert –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã
4. –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ MoE Layer
"""

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import torch
import torch.nn as nn

# –ù–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from experiments.domain.moe.router import MoERouter
from experiments.domain.moe.expert import Expert


def print_separator(title):
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70)


def test_router_basic():
    """–¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ Router"""
    print_separator("–¢–µ—Å—Ç 1: Router - –≤—ã–±–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")

    # –°–æ–∑–¥–∞—ë–º Router –¥–ª—è –º–æ–¥–µ–ª–∏ 0.6B
    router = MoERouter(
        hidden_size=512,
        num_experts=8,
        top_k=2,
        balance_loss_coef=0.01
    )
    router.eval()  # –†–µ–∂–∏–º inference

    # –°–æ–∑–¥–∞—ë–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 1 batch, 4 —Ç–æ–∫–µ–Ω–∞, 512 hidden_size
    batch_size, seq_len, hidden_size = 1, 4, 512
    hidden_states = torch.randn(batch_size, seq_len, hidden_size)

    print(f"\n–í—Ö–æ–¥: {hidden_states.shape} (batch={batch_size}, seq={seq_len}, hidden={hidden_size})")

    # –ü—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ Router
    routing_weights, selected_experts, balance_loss = router(hidden_states, training=False)

    print(f"\n–í—ã—Ö–æ–¥ Router:")
    print(f"  routing_weights: {routing_weights.shape} = {routing_weights}")
    print(f"  selected_experts: {selected_experts.shape} = {selected_experts}")
    print(f"  balance_loss: {balance_loss.item()}")

    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑:")
    for tok_idx in range(seq_len):
        experts = selected_experts[0, tok_idx].tolist()
        weights = routing_weights[0, tok_idx].tolist()
        print(f"  –¢–æ–∫–µ–Ω {tok_idx}: —ç–∫—Å–ø–µ—Ä—Ç—ã {experts}, –≤–µ—Å–∞ {[f'{w:.3f}' for w in weights]}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å–∞ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –≤ 1
        weight_sum = sum(weights)
        print(f"           –°—É–º–º–∞ –≤–µ—Å–æ–≤: {weight_sum:.6f} (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚âà 1.0)")


def test_expert_basic():
    """–¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ Expert"""
    print_separator("–¢–µ—Å—Ç 2: Expert - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤")

    # –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —ç–∫—Å–ø–µ—Ä—Ç
    expert = Expert(
        hidden_size=512,
        intermediate_size=2048,
        dropout=0.0
    )
    expert.eval()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    num_tokens = 3
    hidden_size = 512
    tokens = torch.randn(num_tokens, hidden_size)

    print(f"\n–í—Ö–æ–¥: {tokens.shape} (num_tokens={num_tokens}, hidden={hidden_size})")

    # –ü—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ Expert
    output = expert(tokens.unsqueeze(0)).squeeze(0)  # –î–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º batch dim

    print(f"–í—ã—Ö–æ–¥: {output.shape}")
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Ö–æ–¥  - mean: {tokens.mean():.4f}, std: {tokens.std():.4f}")
    print(f"  –í—ã—Ö–æ–¥ - mean: {output.mean():.4f}, std: {output.std():.4f}")
    print(f"  –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {tokens.shape == output.shape}")


def test_router_expert_integration():
    """–¢–µ—Å—Ç 3: Router + Experts –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"""
    print_separator("–¢–µ—Å—Ç 3: Router + 8 Experts - –ø–æ–ª–Ω—ã–π pipeline")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    hidden_size = 512
    intermediate_size = 2048
    num_experts = 8
    top_k = 2
    batch_size, seq_len = 2, 6  # 2 –ø—Ä–∏–º–µ—Ä–∞ –ø–æ 6 —Ç–æ–∫–µ–Ω–æ–≤

    # –°–æ–∑–¥–∞—ë–º Router
    router = MoERouter(
        hidden_size=hidden_size,
        num_experts=num_experts,
        top_k=top_k
    )
    router.eval()

    # –°–æ–∑–¥–∞—ë–º 8 —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    experts = nn.ModuleList([
        Expert(hidden_size=hidden_size, intermediate_size=intermediate_size, dropout=0.0)
        for _ in range(num_experts)
    ])
    for expert in experts:
        expert.eval()

    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    hidden_states = torch.randn(batch_size, seq_len, hidden_size)
    print(f"\n–í—Ö–æ–¥: {hidden_states.shape}")

    # –®–∞–≥ 1: Router –≤—ã–±–∏—Ä–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    routing_weights, selected_experts, _ = router(hidden_states, training=False)
    print(f"\n–®–∞–≥ 1: Router")
    print(f"  routing_weights: {routing_weights.shape}")
    print(f"  selected_experts: {selected_experts.shape}")

    # –®–∞–≥ 2: –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–Ω–∞–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    print(f"\n–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ (–Ω–∞–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥)")

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞—Ç—á–µ
    outputs = torch.zeros_like(hidden_states)

    for b in range(batch_size):
        for s in range(seq_len):
            token = hidden_states[b, s:s+1, :]  # (1, 1, hidden_size)
            token_output = torch.zeros(1, 1, hidden_size)

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
            for k in range(top_k):
                expert_idx = selected_experts[b, s, k].item()
                weight = routing_weights[b, s, k].item()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–º
                expert_output = experts[expert_idx](token)

                # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
                token_output += weight * expert_output

            outputs[b, s, :] = token_output.squeeze()

    print(f"  –í—ã—Ö–æ–¥: {outputs.shape}")

    # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:")
    expert_usage = torch.bincount(selected_experts.view(-1), minlength=num_experts)
    total_selections = batch_size * seq_len * top_k

    for expert_idx in range(num_experts):
        count = expert_usage[expert_idx].item()
        percentage = (count / total_selections) * 100
        bar = "‚ñà" * int(percentage / 2)  # –ú–∞—Å—à—Ç–∞–± 1:2
        print(f"  –≠–∫—Å–ø–µ—Ä—Ç {expert_idx}: {count:2d}/{total_selections} ({percentage:5.1f}%) {bar}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    print(f"\nüìä –ë–∞–ª–∞–Ω—Å:")
    mean_usage = expert_usage.float().mean().item()
    std_usage = expert_usage.float().std().item()
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {mean_usage:.2f}")
    print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_usage:.2f}")
    if std_usage < mean_usage * 0.5:
        print(f"  ‚úÖ –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å (std < 50% mean)")
    else:
        print(f"  ‚ö†Ô∏è  –ü–ª–æ—Ö–æ–π –±–∞–ª–∞–Ω—Å (std >= 50% mean)")

    return hidden_states, outputs


def test_moe_layer_requirements():
    """–¢–µ—Å—Ç 4: –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è MoE Layer"""
    print_separator("–¢–µ—Å—Ç 4: –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è MoE Layer")

    print("\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã MoE Layer:")
    print("\n1. DISPATCH: –¢–æ–∫–µ–Ω—ã ‚Üí –≠–∫—Å–ø–µ—Ä—Ç—ã")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –ö–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –∏–¥—ë—Ç –∫ 2 —Ä–∞–∑–Ω—ã–º —ç–∫—Å–ø–µ—Ä—Ç–∞–º")
    print("   –†–µ—à–µ–Ω–∏–µ: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º –¥–ª—è batch processing")
    print("   –ü—Ä–∏–º–µ—Ä:")
    print("     –¢–æ–∫–µ–Ω 0: —ç–∫—Å–ø–µ—Ä—Ç—ã [2, 5]")
    print("     –¢–æ–∫–µ–Ω 1: —ç–∫—Å–ø–µ—Ä—Ç—ã [2, 7]")
    print("     –¢–æ–∫–µ–Ω 2: —ç–∫—Å–ø–µ—Ä—Ç—ã [1, 5]")
    print("     ‚Üí –≠–∫—Å–ø–µ—Ä—Ç 2 –ø–æ–ª—É—á–∞–µ—Ç [—Ç–æ–∫–µ–Ω 0, —Ç–æ–∫–µ–Ω 1]")
    print("     ‚Üí –≠–∫—Å–ø–µ—Ä—Ç 5 –ø–æ–ª—É—á–∞–µ—Ç [—Ç–æ–∫–µ–Ω 0, —Ç–æ–∫–µ–Ω 2]")
    print("     ‚Üí –≠–∫—Å–ø–µ—Ä—Ç 7 –ø–æ–ª—É—á–∞–µ—Ç [—Ç–æ–∫–µ–Ω 1]")
    print("     ‚Üí –≠–∫—Å–ø–µ—Ä—Ç 1 –ø–æ–ª—É—á–∞–µ—Ç [—Ç–æ–∫–µ–Ω 2]")

    print("\n2. PROCESS: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: 8 —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ")
    print("   –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nn.ModuleList + —Ü–∏–∫–ª –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º")
    print("   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –í –±—É–¥—É—â–µ–º - expert parallelism –Ω–∞ —Ä–∞–∑–Ω—ã—Ö GPU")

    print("\n3. COMBINE: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Üí –í—ã—Ö–æ–¥")
    print("   –ü—Ä–æ–±–ª–µ–º–∞: –°–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Ç–æ–∫–µ–Ω–æ–≤")
    print("   –†–µ—à–µ–Ω–∏–µ: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ (token_idx, expert_idx, position_in_expert)")
    print("   –ü—Ä–∏–º–µ–Ω–∏—Ç—å routing_weights –ø—Ä–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏")

    print("\n4. EDGE CASES:")
    print("   ‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç –ø–æ–ª—É—á–∞–µ—Ç 0 —Ç–æ–∫–µ–Ω–æ–≤ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
    print("   ‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç –ø–æ–ª—É—á–∞–µ—Ç –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ - capacity enforcement (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    print("   ‚Ä¢ –†–∞–∑–Ω—ã–µ batch sizes - –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å")

    print("\nüìã –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è MoE Layer:")
    print("""
    class SimpleMoELayer(nn.Module):
        def forward(self, x):
            # 1. Router
            weights, experts_idx, loss = self.router(x)

            # 2. Dispatch + Process + Combine (–Ω–∞–∏–≤–Ω–æ)
            output = torch.zeros_like(x)
            for batch in range(B):
                for seq in range(S):
                    for k in range(top_k):
                        expert = self.experts[experts_idx[batch, seq, k]]
                        expert_out = expert(x[batch, seq:seq+1])
                        output[batch, seq] += weights[batch, seq, k] * expert_out.squeeze()

            # 3. Residual
            return output + x, loss
    """)


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\n" + "üß™ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MoE –ö–û–ú–ü–û–ù–ï–ù–¢–û–í".center(70))

    # –§–∏–∫—Å–∏—Ä—É–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    torch.manual_seed(42)

    # –¢–µ—Å—Ç—ã
    test_router_basic()
    test_expert_basic()
    hidden_states, outputs = test_router_expert_integration()
    test_moe_layer_requirements()

    # –ò—Ç–æ–≥–∏
    print_separator("–ò—Ç–æ–≥–∏")
    print("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è MoE Layer")
    print("   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π dispatch mechanism")
    print("   - Batch processing —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ combine —Å routing weights")
    print("   - Residual connection")
    print("\n" + "="*70 + "\n")


if __name__ == "__main__":
    main()
